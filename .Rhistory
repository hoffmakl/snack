else{
print("`tidy_sandwich_glm` does not yet support this `glm.fit` object.")
}
}
tidy_sandwich_glm(temp)
tidy_sandwich_glm_identity <- function(glm_fit){
term <- names(glm_fit$coefficients)
sandwich_se <- diag(vcovHC(glm_fit, type = "HC"))^0.5
tibble(term = term, estimate = glm_fit$coefficients, se = sandwich_se) %>%
mutate(variable = term,
conf_low = estimate - sandwich_se*1.96,
conf_high = estimate + sandwich_se*1.96,
p_value = 2*(1-pnorm(abs(estimate)/sandwich_se)),
estimate = estimate) %>%
mutate(estimate = paste0(round(estimate, 3), " (", round(conf_low, 3), ", ", round(conf_high,3),")")) %>%
filter(variable != "(Intercept)") %>%
select(variable, estimate, conf_low, conf_high, p_value)
}
tidy_sandwich_glm_identity <- function(glm_fit){
term <- names(glm_fit$coefficients)
sandwich_se <- diag(vcovHC(glm_fit, type = "HC"))^0.5
tibble(term = term, estimate = glm_fit$coefficients, se = sandwich_se) %>%
mutate(variable = term,
conf_low = estimate - sandwich_se*1.96,
conf_high = estimate + sandwich_se*1.96,
p_value = 2*(1-pnorm(abs(estimate)/sandwich_se)),
estimate = estimate) %>%
mutate(estimate = paste0(round(estimate, 3), " (", round(conf_low, 3), ", ", round(conf_high,3),")")) %>%
filter(variable != "(Intercept)") %>%
select(variable, estimate, conf_low, conf_high, p_value)
}
tidy_sandwich_glm <- function(glm_fit){
if (glm_fit$family$link == "identity"){
return(tidy_sandwich_glm_identity(glm_fit))
}
if (glm_fit$family$link == "logit"){
return(tidy_sandwich_glm_logit(glm_fit))
}
else{
print("`tidy_sandwich_glm` does not yet support this `glm.fit` object.")
}
}
tidy_sandwich_glm(temp)
tidy_sandwich_glm_identity <- function(glm_fit){
term <- names(glm_fit$coefficients)
sandwich_se <- diag(sandwich::vcovHC(glm_fit, type = "HC"))^0.5
tibble(term = term, estimate = glm_fit$coefficients, se = sandwich_se) %>%
mutate(variable = term,
conf_low = estimate - sandwich_se*1.96,
conf_high = estimate + sandwich_se*1.96,
p_value = 2*(1-pnorm(abs(estimate)/sandwich_se)),
estimate = estimate) %>%
mutate(estimate = paste0(round(estimate, 3), " (", round(conf_low, 3), ", ", round(conf_high,3),")")) %>%
filter(variable != "(Intercept)") %>%
select(variable, estimate, conf_low, conf_high, p_value)
}
tidy_sandwich_glm(temp)
tidy_sandwich_glm_identity <- function(glm_fit){
term <- names(glm_fit$coefficients)
sandwich_se <- diag(sandwich::vcovHC(glm_fit, type = "HC"))^0.5
tibble(term = term, estimate = glm_fit$coefficients, se = sandwich_se) %>%
mutate(variable = term,
conf_low = estimate - sandwich_se*1.96,
conf_high = estimate + sandwich_se*1.96,
p_value = 2*(1-pnorm(abs(estimate)/sandwich_se)),
estimate = estimate) %>%
mutate(estimate = paste0(round(estimate, 3), " (", round(conf_low, 3), ", ", round(conf_high,3),")")) %>%
filter(variable != "(Intercept)") %>%
select(variable, estimate, conf_low, conf_high, p_value)
}
tidy_sandwich_glm(temp)
tidy_sandwich_glm <- function(glm_fit){
if (glm_fit$family$link == "identity"){
return(tidy_sandwich_glm_identity(glm_fit))
}
if (glm_fit$family$link == "logit"){
return(tidy_sandwich_glm_logit(glm_fit))
}
else{
print("`tidy_sandwich_glm` does not yet support this `glm.fit` object.")
}
}
tidy_sandwich_glm_identity <- function(glm_fit){
term <- names(glm_fit$coefficients)
sandwich_se <- diag(sandwich::vcovHC(glm_fit, type = "HC"))^0.5
tibble(term = term, estimate = glm_fit$coefficients, se = sandwich_se) %>%
mutate(variable = term,
conf_low = estimate - sandwich_se*1.96,
conf_high = estimate + sandwich_se*1.96,
p_value = 2*(1-pnorm(abs(estimate)/sandwich_se)),
estimate = estimate) %>%
mutate(estimate = paste0(round(estimate, 3), " (", round(conf_low, 3), ", ", round(conf_high,3),")")) %>%
filter(variable != "(Intercept)") %>%
select(variable, estimate, conf_low, conf_high, p_value)
}
tidy_sandwich_glm(temp)
devtools::document()
devtools::load_all()
tidy_sandwich_glm(temp)
devtools::load_all()
devtools::document()
tidy_sandwich_glm(temp)
devtools::load_all()
devtools::document()
tidy_sandwich_glm(temp)
#' tidy sandwich glm for a linear model (identity link)
#'
#' @param glm_fit glm.fit object for a linear regression
#'
#' @return tidy tibble for plotting and reporting
#' @importFrom magrittr `%>%`
#' @importFrom dplyr select
#' @export
#'
#' @examples
tidy_sandwich_glm_identity <- function(glm_fit){
term <- names(glm_fit$coefficients)
sandwich_se <- diag(sandwich::vcovHC(glm_fit, type = "HC"))^0.5
df <- data.frame(term = term, estimate = glm_fit$coefficients, se = sandwich_se)
df$conf_low <- df$estimate - df$sandwich_se*1.96
df$conf_high <- df$estimate + df$sandwich_se*1.96
df$p_value = 2*(1-pnorm(abs(df$estimate)/df$sandwich_se))
#estimate = paste0(round(estimate, 3), " (", round(conf_low, 3), ", ", round(conf_high,3),")")) %>%
df <- dplyr::select(df, variable = term, estimate, conf_low, conf_high, p_value)
}
tidy_sandwich_glm(temp)
#' tidy sandwich glm for a linear model (identity link)
#'
#' @param glm_fit glm.fit object for a linear regression
#'
#' @return tidy tibble for plotting and reporting
#' @importFrom magrittr `%>%`
#' @importFrom dplyr select
#' @export
#'
#' @examples
tidy_sandwich_glm_identity <- function(glm_fit){
term <- names(glm_fit$coefficients)
sandwich_se <- diag(sandwich::vcovHC(glm_fit, type = "HC"))^0.5
df <- data.frame(term = term, estimate = glm_fit$coefficients, se = sandwich_se)
df$conf_low <- df$estimate - df$sandwich_se*1.96
df$conf_high <- df$estimate + df$sandwich_se*1.96
df$p_value = 2*(1-pnorm(abs(df$estimate)/df$sandwich_se))
#estimate = paste0(round(estimate, 3), " (", round(conf_low, 3), ", ", round(conf_high,3),")")) %>%
df <- dplyr::select(df, variable = term, estimate, conf_low, conf_high, p_value)
}
#' tidy sandwich glm for a linear model (identity link)
#'
#' @param glm_fit glm.fit object for a linear regression
#'
#' @return tidy tibble for plotting and reporting
#' @importFrom magrittr `%>%`
#' @importFrom dplyr select
#' @export
#'
#' @examples
tidy_sandwich_glm_identity <- function(glm_fit){
term <- names(glm_fit$coefficients)
sandwich_se <- diag(sandwich::vcovHC(glm_fit, type = "HC"))^0.5
df <- data.frame(term = term, estimate = glm_fit$coefficients, se = sandwich_se)
df$conf_low <- df$estimate - df$sandwich_se*1.96
df$conf_high <- df$estimate + df$sandwich_se*1.96
df$p_value = 2*(1-pnorm(abs(df$estimate)/df$sandwich_se))
#estimate = paste0(round(estimate, 3), " (", round(conf_low, 3), ", ", round(conf_high,3),")")) %>%
df <- dplyr::select(df, variable = term, estimate, conf_low, conf_high, p_value)
}
tidy_sandwich_glm(temp)
#' tidy sandwich glm for a linear model (identity link)
#'
#' @param glm_fit glm.fit object for a linear regression
#'
#' @return tidy tibble for plotting and reporting
#' @importFrom magrittr `%>%`
#' @importFrom dplyr select
#' @export
#'
#' @examples
tidy_sandwich_glm_identity <- function(glm_fit){
term <- names(glm_fit$coefficients)
sandwich_se <- diag(sandwich::vcovHC(glm_fit, type = "HC"))^0.5
df <- data.frame(term = term, estimate = glm_fit$coefficients, se = sandwich_se)
df$conf_low <- df$estimate - df$sandwich_se*1.96
df$conf_high <- df$estimate + df$sandwich_se*1.96
df$p_value = 2*(1-pnorm(abs(df$estimate)/df$sandwich_se))
#estimate = paste0(round(estimate, 3), " (", round(conf_low, 3), ", ", round(conf_high,3),")")) %>%
out <- df[c("term", "estimate", "conf_low", "conf_high", "p_value")]
return(out)
}
tidy_sandwich_glm(temp)
#' tidy sandwich glm for a linear model (identity link)
#'
#' @param glm_fit glm.fit object for a linear regression
#'
#' @return tidy tibble for plotting and reporting
#' @importFrom magrittr `%>%`
#' @importFrom dplyr select
#' @export
#'
#' @examples
tidy_sandwich_glm_identity <- function(glm_fit){
term <- names(glm_fit$coefficients)
browser()
sandwich_se <- diag(sandwich::vcovHC(glm_fit, type = "HC"))^0.5
df <- data.frame(term = term, estimate = glm_fit$coefficients, se = sandwich_se)
df$conf_low <- df$estimate - df$sandwich_se*1.96
df$conf_high <- df$estimate + df$sandwich_se*1.96
df$p_value = 2*(1-pnorm(abs(df$estimate)/df$sandwich_se))
#estimate = paste0(round(estimate, 3), " (", round(conf_low, 3), ", ", round(conf_high,3),")")) %>%
out <- df[c("term", "estimate", "conf_low", "conf_high", "p_value")]
return(out)
}
tidy_sandwich_glm(temp)
names(temp$coefficients)
#' tidy sandwich glm for a linear model (identity link)
#'
#' @param glm_fit glm.fit object for a linear regression
#'
#' @return tidy tibble for plotting and reporting
#' @importFrom magrittr `%>%`
#' @importFrom dplyr select
#' @export
#'
#' @examples
tidy_sandwich_glm_identity <- function(glm_fit){
browser()
variable <- names(glm_fit$coefficients)
sandwich_se <- diag(sandwich::vcovHC(glm_fit, type = "HC"))^0.5
df <- data.frame(term = term, estimate = glm_fit$coefficients, se = sandwich_se)
df$conf_low <- df$estimate - df$sandwich_se*1.96
df$conf_high <- df$estimate + df$sandwich_se*1.96
df$p_value = 2*(1-pnorm(abs(df$estimate)/df$sandwich_se))
#estimate = paste0(round(estimate, 3), " (", round(conf_low, 3), ", ", round(conf_high,3),")")) %>%
out <- df[c("variable", "estimate", "conf_low", "conf_high", "p_value")]
return(out)
}
names(temp$coefficients)
tidy_sandwich_glm(temp)
variable <- names(glm_fit$coefficients)
sandwich_se <- diag(sandwich::vcovHC(glm_fit, type = "HC"))^0.5
df <- data.frame(term = term, estimate = glm_fit$coefficients, se = sandwich_se)
#' tidy sandwich glm for a linear model (identity link)
#'
#' @param glm_fit glm.fit object for a linear regression
#'
#' @return tidy tibble for plotting and reporting
#' @importFrom magrittr `%>%`
#' @importFrom dplyr select
#' @export
#'
#' @examples
tidy_sandwich_glm_identity <- function(glm_fit){
browser()
variable <- names(glm_fit$coefficients)
sandwich_se <- diag(sandwich::vcovHC(glm_fit, type = "HC"))^0.5
df <- data.frame(variable, "estimate" = glm_fit$coefficients, "se" = sandwich_se)
df$conf_low <- df$estimate - df$sandwich_se*1.96
df$conf_high <- df$estimate + df$sandwich_se*1.96
df$p_value = 2*(1-pnorm(abs(df$estimate)/df$sandwich_se))
#estimate = paste0(round(estimate, 3), " (", round(conf_low, 3), ", ", round(conf_high,3),")")) %>%
out <- df[c("variable", "estimate", "conf_low", "conf_high", "p_value")]
return(out)
}
#' tidy sandwich glm for a linear model (identity link)
#'
#' @param glm_fit glm.fit object for a linear regression
#'
#' @return tidy tibble for plotting and reporting
#' @importFrom magrittr `%>%`
#' @importFrom dplyr select
#' @export
#'
#' @examples
tidy_sandwich_glm_identity <- function(glm_fit){
variable <- names(glm_fit$coefficients)
sandwich_se <- diag(sandwich::vcovHC(glm_fit, type = "HC"))^0.5
df <- data.frame(variable, "estimate" = glm_fit$coefficients, "se" = sandwich_se)
df$conf_low <- df$estimate - df$sandwich_se*1.96
df$conf_high <- df$estimate + df$sandwich_se*1.96
df$p_value = 2*(1-pnorm(abs(df$estimate)/df$sandwich_se))
#estimate = paste0(round(estimate, 3), " (", round(conf_low, 3), ", ", round(conf_high,3),")")) %>%
out <- df[c("variable", "estimate", "conf_low", "conf_high", "p_value")]
return(out)
}
tidy_sandwich_glm(temp)
data.frame(x,y)
data.frame(x,"temp"=y)
#' tidy sandwich glm for a linear model (identity link)
#'
#' @param glm_fit glm.fit object for a linear regression
#'
#' @return tidy tibble for plotting and reporting
#' @importFrom magrittr `%>%`
#' @importFrom dplyr select
#' @export
#'
#' @examples
tidy_sandwich_glm_identity <- function(glm_fit){
variable <- names(glm_fit$coefficients)
sandwich_se <- diag(sandwich::vcovHC(glm_fit, type = "HC"))^0.5
df <- data.frame(variable, "estimate" = glm_fit$coefficients, sandwich_se)
df$conf_low <- df$estimate - df$sandwich_se*1.96
df$conf_high <- df$estimate + df$sandwich_se*1.96
df$p_value = 2*(1-pnorm(abs(df$estimate)/df$sandwich_se))
#estimate = paste0(round(estimate, 3), " (", round(conf_low, 3), ", ", round(conf_high,3),")")) %>%
out <- df[c("variable", "estimate", "conf_low", "conf_high", "p_value")]
return(out)
}
tidy_sandwich_glm(temp)
tidy_sandwich_glm(temp) -> tbl
which(tbl$variable == "(Intercept)")
tbl[!which(tbl$variable == "(Intercept)")]
tbl[!which(tbl$variable == "(Intercept)"),]
tbl[-which(tbl$variable == "(Intercept)"),]
#' tidy sandwich glm for a linear model (identity link)
#'
#' @param glm_fit glm.fit object for a linear regression
#'
#' @return tidy tibble for plotting and reporting
#' @export
#'
#' @examples
tidy_sandwich_glm_identity <- function(glm_fit){
variable <- names(glm_fit$coefficients)
sandwich_se <- diag(sandwich::vcovHC(glm_fit, type = "HC"))^0.5
df <- data.frame(variable, "estimate" = glm_fit$coefficients, sandwich_se)
df$conf_low <- df$estimate - df$sandwich_se*1.96
df$conf_high <- df$estimate + df$sandwich_se*1.96
df$p_value = 2*(1-pnorm(abs(df$estimate)/df$sandwich_se))
df <- df[-which(df$variable == "(Intercept)")]
#estimate = paste0(round(estimate, 3), " (", round(conf_low, 3), ", ", round(conf_high,3),")")) %>%
out <- df[c("variable", "estimate", "conf_low", "conf_high", "p_value")]
row.names(out) <- NULL
return(out)
}
tidy_sandwich_glm(temp)
#' tidy sandwich glm for a linear model (identity link)
#'
#' @param glm_fit glm.fit object for a linear regression
#'
#' @return tidy tibble for plotting and reporting
#' @export
#'
#' @examples
tidy_sandwich_glm_identity <- function(glm_fit){
variable <- names(glm_fit$coefficients)
sandwich_se <- diag(sandwich::vcovHC(glm_fit, type = "HC"))^0.5
df <- data.frame(variable, "estimate" = glm_fit$coefficients, sandwich_se)
df$conf_low <- df$estimate - df$sandwich_se*1.96
df$conf_high <- df$estimate + df$sandwich_se*1.96
df$p_value = 2*(1-pnorm(abs(df$estimate)/df$sandwich_se))
df <- df[-which(df$variable == "(Intercept)"),]
#estimate = paste0(round(estimate, 3), " (", round(conf_low, 3), ", ", round(conf_high,3),")")) %>%
out <- df[c("variable", "estimate", "conf_low", "conf_high", "p_value")]
row.names(out) <- NULL
return(out)
}
??report
report <- function(glm_fit){
glm_tbl <- sandwich_glm(glm_fit)
glm_tbl$estimate <- paste0(round(df$estimate, 2), " (", round(df$conf_low, 2), ", ", round(df$conf_high,2),")")
glm_tbl$p_value <- ifelse(glm_tbl$p_value < .001, "<.001", round(df$p_value, 3))
out <- glm_tbl[c("estimate","p_value")]
return(out)
}
report(temp)
sandwich_glm <- function(glm_fit){
if (glm_fit$family$link == "identity"){
return(sandwich_glm_identity(glm_fit))
}
if (glm_fit$family$link == "logit"){
return(sandwich_glm_logit(glm_fit))
}
else{
print("`sandwich_glm` does not yet support this `glm.fit` object.")
}
}
#' tidy sandwich glm for a linear model (identity link)
#'
#' @param glm_fit glm.fit object for a linear regression
#'
#' @return tidy tibble for plotting and reporting
#' @export
#'
#' @examples
sandwich_glm_identity <- function(glm_fit){
variable <- names(glm_fit$coefficients)
sandwich_se <- diag(sandwich::vcovHC(glm_fit, type = "HC"))^0.5
df <- data.frame(variable, "estimate" = glm_fit$coefficients, sandwich_se)
df$conf_low <- df$estimate - df$sandwich_se*1.96
df$conf_high <- df$estimate + df$sandwich_se*1.96
df$p_value = 2*(1-pnorm(abs(df$estimate)/df$sandwich_se))
df <- df[-which(df$variable == "(Intercept)"),]
out <- df[c("variable", "estimate", "conf_low", "conf_high", "p_value")]
row.names(out) <- NULL
return(out)
}
#' tidy sandwich glm for a logistic model (logit link)
#'
#' @param glm_fit glm.fit object for a logistic regression
#'
#' @return tidy tibble for plotting and reporting
#' @export
#'
#' @examples
sandwich_glm_logit <- function(glm_fit){
variable <- names(glm_fit$coefficients)
sandwich_se <- diag(sandwich::vcovHC(glm_fit, type = "HC"))^0.5
df <- data.frame(variable, "estimate" = glm_fit$coefficients, sandwich_se)
df$conf_low <- exp(df$estimate - df$sandwich_se*1.96)
df$conf_high <- exp(df$estimate + df$sandwich_se*1.96)
df$p_value = 2*(1-pnorm(abs(df$estimate)/df$sandwich_se))
df$estimate <- exp(df$estimate)
df <- df[-which(df$variable == "(Intercept)"),]
out <- df[c("variable", "estimate", "conf_low", "conf_high", "p_value")]
row.names(out) <- NULL
return(out)
}
report <- function(glm_fit){
glm_tbl <- sandwich_glm(glm_fit)
glm_tbl$estimate <- paste0(round(df$estimate, 2), " (", round(df$conf_low, 2), ", ", round(df$conf_high,2),")")
glm_tbl$p_value <- ifelse(glm_tbl$p_value < .001, "<.001", round(df$p_value, 3))
out <- glm_tbl[c("estimate","p_value")]
return(out)
}
report(temp)
report_sglm <- function(glm_fit){
glm_tbl <- sandwich_glm(glm_fit)
glm_tbl$estimate <- paste0(round(df$estimate, 2), " (", round(df$conf_low, 2), ", ", round(df$conf_high,2),")")
glm_tbl$p_value <- ifelse(glm_tbl$p_value < .001, "<.001", round(glm_tbl$p_value, 3))
out <- glm_tbl[c("estimate","p_value")]
return(out)
}
report_sglm(temp)
report_sglm <- function(glm_fit){
glm_tbl <- sandwich_glm(glm_fit)
glm_tbl$estimate <- paste0(round(df$estimate, 2), " (", round(df$conf_low, 2), ", ", round(df$conf_high,2),")")
glm_tbl$p_value <- ifelse(glm_tbl$p_value < .001, "<.001", round(glm_tbl$p_value, 3))
out <- glm_tbl[c("estimate","p_value")]
return(out)
}
report_sglm(temp)
report_sglm <- function(glm_fit){
glm_tbl <- sandwich_glm(glm_fit)
glm_tbl$estimate <- paste0(round(glm_tbl$estimate, 2), " (", round(glm_tbl$conf_low, 2), ", ", round(glm_tbl$conf_high,2),")")
glm_tbl$p_value <- ifelse(glm_tbl$p_value < .001, "<.001", round(glm_tbl$p_value, 3))
out <- glm_tbl[c("estimate","p_value")]
return(out)
}
report_sglm(temp)
report_sglm(temp2)
report_sglm <- function(glm_fit){
glm_tbl <- sandwich_glm(glm_fit)
glm_tbl$estimate <- paste0(round(glm_tbl$estimate, 2), " (", round(glm_tbl$conf_low, 2), ", ", round(glm_tbl$conf_high,2),")")
glm_tbl$p_value <- ifelse(glm_tbl$p_value < .001, "<.001", round(glm_tbl$p_value, 3))
out <- glm_tbl[c("variable", "estimate","p_value")]
return(out)
}
report_sglm(temp2)
report_sglm(temp)
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
usethis::use_mit_license("Katherine Hoffman")
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
stats::glm()
stats::glm()
devtools::document()
devtools::document()
devtools::check()
usethis::use_package("lattice")
devtools::document()
usethis::use_package("lattice")
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
sandwich::vcovHC()
devtools::document()
usethis::use_package("sandwich")
devtools::document()
usethis::use_package("sandwich")
devtools::document()
devtools::check()
